@using BeatGeneratorAPI
@using ReflectiveUI.Core.ObjectGraph.Nodes

@inject ReflectedStateGraph<ClockGenerator> ObjectGraph

<PageTitle>Clock Pulse</PageTitle>

<ReflectiveUIApp>
    <NodeTemplate Context="Node">
        @switch (Node)
        {
            case InteractNode.Property p when p.CurrentInstance is not null && p.Parent?.Parent is null:
                var child = p.Children.FirstOrDefault();
                if (child is InteractNode.Object)
                {
                    <a href="@child?.Path">@p.DisplayName</a>
                }
                else
                {
                    <DefaultInteractNodeRenderer Node="Node" />
                }
                break;
            default:
                <DefaultInteractNodeRenderer Node="Node" />
                break;
        }
    </NodeTemplate>
</ReflectiveUIApp>

@code {
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ObjectGraph.RootInstance.BeatUpdated += (s, a) => ObjectGraph.Reload();
        }

        return Task.CompletedTask;
    }
}
