@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using ReflectiveUI.Core.ObjectGraph
@using ReflectiveUI.Core.ObjectGraph.Nodes

@if (Node is not null)
{
    var templateMembers = Node.Children
        .OfType<InteractNode.TypeInfo>().SingleOrDefault()?
            .Children
            .OfType<InteractNode.Object>().SingleOrDefault()?
                .Children
                .Where(n => n is InteractNode.Property or InteractNode.Method);

    var items = Node.Children
        .OfType<InteractNode.EnumerableItems>().SingleOrDefault()?
            .Children;

    <div class="node-children">
        <table>
            @if (templateMembers is not null)
            {
                <tr>
                    @foreach (var node in templateMembers)
                    {
                        <th class="@(node.Suppression.IsSuppressed ? "node-suppressed" : "")">
                            @if (node is InteractNode.Property prop)
                            {
                                @prop.DisplayName
                            }
                        </th>
                    }
                </tr>
            }
            @if (items is not null)
            {
                foreach (var child in items)
                {
                    <tr>
                        @foreach (var node in child.Children)
                        {
                            <td>
                                @if (node is InteractNode.Property p)
                                {
                                    @CellContent?.Invoke(p.Children.Single());
                                }
                                else if (node is InteractNode.Method m)
                                {
                                    @CellContent?.Invoke(m.Children.Single());
                                }
                            </td>
                        }
                    </tr>
                }
            }
        </table>
    </div>
}


@code {
    [Parameter]
    public InteractNode.Enumerable? Node { get; set; }

    [Parameter]
    public RenderFragment<IInteractNode>? CellContent { get; set; }
}
