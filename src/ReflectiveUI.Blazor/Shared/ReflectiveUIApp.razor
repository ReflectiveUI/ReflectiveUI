
@inject BlazorReflectedStateRoutingPolicy RoutingPolicy;
@inject IReflectedStateGraph StateGraph;

<ReflectiveUIRouter>
    <Found Context="node">
        <CascadingValue Value="NodeTemplate">
            <LayoutView Layout="@typeof(TreeLayout)">
                <InteractNodeRenderer Node="node" />
            </LayoutView>
        </CascadingValue>
    </Found>
    <NotFound>
        Not Found
    </NotFound>
</ReflectiveUIRouter>

@code {

    [Parameter]
    public RenderFragment<IInteractNode>? NodeTemplate { get; set; }

    protected override Task OnInitializedAsync()
    {
        RoutingPolicy.RoutePageWhen(n => n.Parent is null);

        return Task.CompletedTask;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateGraph.AppUpdated += (sender, args) =>
            {
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            };
        }

        return Task.CompletedTask;
    }
}
