
@inject ValuedTime.App.Services.CurrentDayService CurrentDayService;
@inject ValuedTime.App.Services.ActivityService ActivityService;

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <StartTimeInput MinimumStartTime="_minimumStartTime" @bind-StartTime="_startTime" />
    <MudTextField T="string" @bind-Value="@_name" Label="Name" />
    <TimeEstimateInput @bind-Estimate="@_estimate" />
    <LifeValueSelector @bind-SelectedLifeValueIds="_selectedLifeValueIds" />
    <div>
        <MudButton OnClick="OnCancel">Cancel</MudButton>
        <MudButton OnClick="Submitted">Start</MudButton>
    </div>
</MudForm>

@code {
    [Parameter]
    public Guid? ActivityId { get; set; }

    [Parameter]
    public EventCallback<StartActivityCommand> OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }


    string? _name;
    TimeSpan? _estimate = TimeSpan.FromMinutes(15);
    DateTime _startTime = DateTime.Now;
    DateTime _minimumStartTime = DateTime.Now.Date;
    List<Guid> _selectedLifeValueIds = new();

    bool success;
    string[] errors = { };
    MudForm? form;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _minimumStartTime = await CurrentDayService.GetMinimumStartTimeAsync(_startTime);
            if (ActivityId is null)
                return;

            var activity = await ActivityService.GetActivityAsync(ActivityId.Value);
            if (activity is null)
                return;

            _selectedLifeValueIds = activity.ExpectedLifeValueIds;
            _name = activity.Name;

            StateHasChanged();
        }
    }

    async Task Submitted()
    {
        if (ActivityId is null)
            return;

        await OnSubmit.InvokeAsync(new StartActivityCommand(ActivityId.Value, _startTime, _estimate, _selectedLifeValueIds));
    }
}
