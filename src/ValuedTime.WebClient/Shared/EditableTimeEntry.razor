
@inject ValuedTime.App.Services.CurrentDayService CurrentDayService;

@if (TimeEntry is not null && _mode == Mode.Edit)
{
    @* Editing a time entry *@
    <div>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="Save">Save</MudButton>
    </div>
}
else if (TimeEntry is not null)
{
    @* Displaying a time entry *@
    <MudText Color="Color.Default" Typo="Typo.caption">
        @TimeEntry.StartTime.ToShortTimeString() - @TimeEntry.EndTime.ToShortTimeString() (@TimeEntry.Duration.TotalMinutes.ToString("F0") Minutes)
    </MudText>
    <MudText Color="Color.Default" Typo="Typo.body1">@TimeEntry.ActivityName</MudText>
    <div>
        @foreach (var value in TimeEntry.LifeValues)
        {
            <MudChip Text="@value.Name" Variant="Variant.Text" Color="Color.Primary"></MudChip>
        }
    </div>
    <MudIconButton Icon="@Icons.Material.Filled.Delete"
        OnClick="() => CurrentDayService.DeleteTimeEntry(TimeEntry.Id)"></MudIconButton>
    <MudIconButton Icon="@Icons.Material.Filled.Edit"
        OnClick="() => EditTimeEntry()"></MudIconButton>
}

@code {
    enum Mode
    {
        Display,
        Edit,
    }

    [Parameter]
    public TimeEntry? TimeEntry { get; set; }

    Mode _mode = Mode.Display;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
        return Task.CompletedTask;
    }

    void EditTimeEntry()
    {
        _mode = Mode.Edit;
    }

    void Cancel()
    {
        _mode = Mode.Display;
    }

    Task Save()
    {
        _mode = Mode.Display;
        return Task.CompletedTask;
    }
}
